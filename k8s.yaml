# multiplay.yaml
---
- hosts: webservers
  become: yes
  tasks:
    - name: selinux config
      selinux:
        policy: targeted
        state: permissive

    - name: stop firewalld
      service:
        name: firewalld
        state: stopped
        enabled: false

    - name: swap off on runtime
      shell: swapoff -a
      when: ansible_swaptotal_mb > 0

    - name: swap off on fstab
      mount:
        name: none
        fstype: swap
        state: absent

    - name: Ensure br_netfilter is enabled
      modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - br_netfilter
        - overlay

    - name: sysctl config
      sysctl:
        name: "{{ item }}"
        value: '1'
        reload: yes
        sysctl_file: /etc/sysctl.d/k8s.conf
        state: present
        sysctl_set: yes
      loop:
        - net.bridge.bridge-nf-call-ip6tables
        - net.bridge.bridge-nf-call-iptables
        - net.ipv4.ip_forward

    - name: Download docker-ce repository
      ansible.builtin.get_url:
        url: http://download.docker.com/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/
        force_basic_auth: yes

    - name: Set up Kubernetes repository
      ansible.builtin.yum_repository:
        name: kubernetes
        description: Kubernetes Repository
        baseurl: https://pkgs.k8s.io/core:/stable:/v1.29/rpm/
        gpgcheck: yes
        enabled: yes
        repo_gpgcheck: yes
        gpgkey:
          - https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key

    - name: Install Kubernetes (kubeadm, kubelet, kubectl)
      ansible.builtin.yum:
        name:
          - kubeadm
          - kubelet
          - kubectl
          - containerd
        state: present

    - name: Containerd configuration
      ansible.builtin.command:
        cmd: containerd config default > /etc/containerd/config.toml
      become: true

    - name: Ensure /etc/containerd/certs.d directory exists
      ansible.builtin.file:
        path: /etc/containerd/certs.d
        state: directory
        mode: '0755'

    - name: Update SystemdCgroup to true in config.toml
      ansible.builtin.lineinfile:
        path: /etc/containerd/config.toml
        regexp: '^\s*SystemdCgroup\s*=\s*false\s*$'
        line: 'SystemdCgroup = true'

    - name: Set config_path in config.toml
      ansible.builtin.lineinfile:
        path: /etc/containerd/config.toml
        regexp: '^\s*config_path\s*=\s*""\s*$'
        line: 'config_path="/etc/containerd/certs.d"'

    - name: Start and Enable Containerd
      ansible.builtin.systemd:
        state: started
        enabled: true
        name: containerd

    - name: Start and Enable kubadm
      ansible.builtin.systemd:
        state: started
        enabled: true
        name: kubelet

    - name: Install dnsmasq on control panel
      ansible.builtin.yum:
        state: latest
        name: dnsmasq
      when: inventory_hostname == 'servera.example.com'

    - name: Copy /etc/hosts to Servera
      ansible.builtin.copy:
        src: /etc/hosts
        dest: /etc/hosts
      when: inventory_hostname == 'servera.example.com'

    - name: Copy /etc/hosts to Serverb, Serverc
      ansible.builtin.copy:
        src: /etc/hosts
        dest: /etc/resolv.conf
      when: inventory_hostname == 'serverb.example.com, serverc.example.com'

    - name: Start and Enable dnsmasq
      ansible.builtin.systemd:
        state: started
        enabled: true
        name: dnsmasq
      when: inventory_hostname == 'servera.example.com'

    - name: init cluster
      shell: |
        kubeadm init --apiserver-advertise-address=172.16.0.101 \
        --pod-network-cidr=192.168.0.0/16 \
        --token=kdigit.1234567890hellow
      when: inventory_hostname in groups['controlplanes']
      ignore_errors: yes

    - name: join cluster
      shell: |
        kubeadm join --token=kdigit.1234567890hellow \
                     --discovery-token-unsafe-skip-ca-verification
                     172.16.0.101:6443
      when: inventory_hostname in groups['worker_nodes']

